// –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞, —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Å—Ç–∏–ª–µ–π, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ backend

import { Transform } from 'stream';

let removedCount = 0;

// –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-static –∏–∑ html —Ñ–∞–π–ª–æ–≤
// –í–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ (–¥–æ—á–µ—Ä–Ω–∏–µ) —ç–ª–µ–º–µ–Ω—Ç—ã!
const removeStaticElements = new Transform({
  objectMode: true,
  transform(file, encoding, callback) {
    if (file.isNull() || !file.contents) {
      return callback(null, file);
    }

    if (file.path.endsWith('.html')) {
      try {
        let content = file.contents.toString();
        const initialLength = content.length;
        
        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ data-static
        const staticElementPattern = /<([a-z][a-z0-9]*)([^>]*?)\sdata-static([^>]*?)>[\s\S]*?<\/\1>/gi;
        content = content.replace(staticElementPattern, (match) => {
          removedCount++;
          return '';
        });
        
        if (content.length !== initialLength) {
          console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª: ${file.relative}`);
        }
        
        file.contents = Buffer.from(content);
      } catch (err) {
        return callback(err);
      }
    }
    
    callback(null, file);
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ display —Å—Ç–∏–ª—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-thymeleaf –∏–∑ css —Ñ–∞–π–ª–æ–≤
const removeThymeleafHiding = new Transform({
  objectMode: true,
  transform(file, encoding, callback) {
    if (file.isNull() || !file.contents) {
      return callback(null, file);
    }

    if (file.path.endsWith('.css')) {
      try {
        let content = file.contents.toString();
        const initialLength = content.length;
        
        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Å—Ç–∏–ª—è –≤ style.css –∏ style.min.css
        const thymeleafPattern = /\[data-thymeleaf\]\s*{\s*display\s*:\s*none\s*!important\s*;?\s*}/gmi;
        content = content.replace(thymeleafPattern, '');
        
        if (content.length !== initialLength) {
          console.log(`üîÑ –û—á–∏—â–µ–Ω display —Å—Ç–∏–ª—å –¥–ª—è thymeleaf —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ: ${file.relative}`);
        } else {
          console.log(`‚ÑπÔ∏è  Display —Å—Ç–∏–ª—å –¥–ª—è thymeleaf —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ: ${file.relative}`);
        }
        
        file.contents = Buffer.from(content);
      } catch (err) {
        return callback(err);
      }
    }
    
    callback(null, file);
  }
});

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (css, fonts, img, js)
export const backendStatic = () => {
  const { gulp, path, plugins } = app;
  
  return gulp.src(path.backend.static.src, { 
    base: path.buildFolder,
    allowEmpty: true
  })
    .pipe(plugins.if(app.isBuild, plugins.newer(path.backend.static.dest)))
    .pipe(removeThymeleafHiding)
    .pipe(gulp.dest(path.backend.static.dest))
    .on('end', () => console.log('‚úÖ –°—Ç–∞—Ç–∏–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—ç–∫–µ–Ω–¥!'));
};

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ html —à–∞–±–ª–æ–Ω–æ–≤
export const backendTemplates = () => {
  const { gulp, path, plugins } = app;
  
  // –°—á–µ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-static
  removedCount = 0;
  
  return gulp.src(path.backend.templates.src, { 
    base: path.buildFolder,
    allowEmpty: true
  })
    .pipe(plugins.if(app.isBuild, plugins.newer(path.backend.templates.dest)))
    .pipe(removeStaticElements)
    .pipe(gulp.dest(path.backend.templates.dest))
    .on('end', () => {
      console.log('‚úÖ –®–∞–±–ª–æ–Ω—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—ç–∫–µ–Ω–¥!');
      if (removedCount > 0) {
        console.log(`‚ôªÔ∏è  –£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-static: ${removedCount}`);
      } else {
        console.log('‚ÑπÔ∏è –≠–ª–µ–º–µ–Ω—Ç—ã —Å data-static –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    });
};